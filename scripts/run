#!/bin/bash
TYPE="gwman"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT
# ROOT_DIR=$SITE_ROOT

if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

export MBR_ENV=${MBR_ENV:-dev}
export MBRAPP_BRANCH=${MBRAPP_BRANCH:-staging}
export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}
export GWMAN_BRANCH=${GWMAN_BRANCH:-$MBR_ENV}
export NODE_BRANCH=${NODE_BRANCH:-$MBR_ENV}
export GATEWAY_BRANCH=${GATEWAY_BRANCH:-$MBR_ENV}
export STAT_BRANCH=${STAT_BRANCH:-$MBR_ENV}
export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}
export API_BRANCH=${API_BRANCH:-$MBR_ENV}
export SESSION_BRANCH=${SESSION_BRANCH:-$MBR_ENV}
export GIT_BRANCH=${GIT_BRANCH:-$MBR_ENV}
export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

ASDF=/massbit/massbitroute/app/gbc/bin/.asdf
GDNSD_VERSION=v3.8.0
GDNSD_DIR=$ASDF/installs/gdnsd/$GDNSD_VERSION
#  $service_dir/gwman/data|http://$GIT_GWMANDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/gwmandeploy.git|$GWMAN_BRANCH \
_repo() {
	REPOS="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$MBR_ENV \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
 $mbr_root/gbc|https://github.com/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
 $mbr_root/gbc/bin/.asdf|https://github.com/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \

  $service_dir/gwman/data|$GIT_PRIVATE_READ_URL/massbitroute/gwmandeploy.git|$GWMAN_BRANCH \
  $service_dir/gwman|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gwman.git|$GWMAN_BRANCH \
$service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
"
}
_repo

_tune_os() {
	#dns
	sed 's/#DNSStubListener=yes/DNSStubListener=no/' /etc/systemd/resolved.conf -i
	pkill -f systemd-resolve

	rm /etc/resolv.conf
	echo nameserver 8.8.8.8 >/etc/resolv.conf
	systemctl stop systemd-resolved
	systemctl disable systemd-resolved
}

_init() {
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_tune_os
	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi

	source $SITE_ROOT/.env

	_git_clone $GIT_PRIVATE_READ_URL/massbitroute/env.git /massbit/massbitroute/app/src/env $MBR_ENV
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc

	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
}
_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db $SITE_ROOT/zones $SITE_ROOT/run $SITE_ROOT/data/zones

	# 	cd $SITE_ROOT
	# 	for _d in monitors.d failover.d weighted.d multivalue.d datacenter.d geolocation.d/maps.d geolocation.d/resources.d; do
	# 		_dir=data/conf.d/$_d
	# 		mkdir -p $_dir
	# 		touch $_dir/_default
	# 	done

	# 	if [ ! -f "$SITE_ROOT/data/conf.d/monitors.d/gateway" ]; then
	# 		cat >$SITE_ROOT/data/conf.d/monitors.d/gateway <<EOF
	#  gateway_check => {
	#     plugin => tcp_connect,
	#     port => 443,
	#     up_thresh => 20,
	#     ok_thresh => 10,
	#     down_thresh => 10,
	#     interval => 10,
	#     timeout => 3,
	#   }
	# EOF
	# fi

	if [ ! -f "$SITE_ROOT/geoip/GeoIP2-City.mmdb" ]; then
		apt update
		apt-get install -y xz-utils
		tar -xvJf $SITE_ROOT/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/geoip
	fi

	if [ ! -f "$SITE_ROOT/data/zones/${DOMAIN}" ]; then
		sed "s/_DOMAIN_/${DOMAIN}/g" $SITE_ROOT/etc/zone.tpl >$SITE_ROOT/data/zones/${DOMAIN}
	fi

	if [ ! -f "$SITE_ROOT/zones/${DOMAIN}" ]; then
		cp $SITE_ROOT/data/zones/${DOMAIN} $SITE_ROOT/zones/${DOMAIN}
	fi
	if [ ! -f "$SITE_ROOT/config" ]; then
		cat $SITE_ROOT/config <<EOF
options => {
    run_dir = $SITE_ROOT/run
    state_dir = $SITE_ROOT/run
    tcp_threads => 1
    udp_threads => 1
    edns_client_subnet => true
    zones_default_ttl => 3600
    listen => [127.0.0.1]
    dns_port = 5300
}

service_types => {
    $include{data/conf.d/monitors.d/*}
}


plugins => {
    simplefo => {
        $include{data/conf.d/failover.d/*}
    }
    weighted => {
            $include{data/conf.d/weighted.d/*}
    }
    multifo => {
            $include{data/conf.d/multivalue.d/*}
    }

    metafo => {
        resources => {
            $include{data/conf.d/datacenter.d/*}
        }
    }
    geoip =>  {
            maps => {
                $include{data/conf.d/geolocation.d/maps.d/*}
            }
            resources => {
                $include{data/conf.d/geolocation.d/resources.d/*}
            }
    }
}
EOF
	fi
}

_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
		liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev cron

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}
_install_one() {
	_init
	_prepare
	_install_repos
}

_install() {
	_install_one
	_supervisor
}

_add_cron() {
	cat <<EOF >/tmp/crontab
0 0 * * * $SITE_ROOT/scripts/run _update_ssl
EOF
	crontab /tmp/crontab
}

_rebuild_conf() {
	_dir=$SITE_ROOT/data/zones
	_file_ok=$SITE_ROOT/zones/$DOMAIN
	_file=$(mktemp)
	cat $_dir/$DOMAIN >$_file
	echo >>$_file

	if [ -f "$SITE_ROOT/env/domain" ]; then
		cat $SITE_ROOT/env/domain >>$_file
		echo >>$_file
	fi

	find $_dir/dapi -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	find $_dir/gateway -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	find $_dir/node -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	mv $_file $_file_ok
}
_reload_gdnsd() {
	$GDNSD_DIR/sbin/gdnsd -c $SITE_ROOT checkconf
	if [ $? -eq 0 ]; then
		$GDNSD_DIR/bin/gdnsdctl -c $SITE_ROOT replace
	fi
}
_reload() {
	_add_cron
	_rebuild_conf
	_reload_gdnsd
	$SITE_ROOT/cmd_server _update
}

_update_ssl() {
	_git_config
	git_ssl='git -C /etc/letsencrypt'
	bash $SITE_ROOT/cert.sh _renew
	$git_ssl add /etc/letsencrypt
	$git_ssl commit -m update
	$git_ssl push origin master
}

_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_update() {
	_st_update=0
	echo "Update"
	_update_repos
	_st_update=$?
	return $_st_update
}
_monitor() {
	echo mbr-gwman >vars/TYPE

	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
}

_service_gdnsd() {
	mkdir -p $SITE_ROOT/run/dns
	exec $GDNSD_DIR/sbin/gdnsd -c $SITE_ROOT -RD start
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	sleep 3
	mkdir -p $SITE_ROOT/run
	touch $SITE_ROOT/run/admin_state
	$SITE_ROOT/start_server
}

$@
