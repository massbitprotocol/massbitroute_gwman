#!/bin/bash
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT/tmp
GITHUB_TRIES=5
VAR=$SITE_ROOT/vars
if [ ! -d "$VAR" ]; then
	mkdir $VAR
fi
ENV=$(cat $VAR/ENV)
if [ "x$ENV" == "x" ]; then
  source $SITE_ROOT/.env
else
  source $SITE_ROOT/.env.${ENV}
fi
auth=$GIT_READ
ASDF=/massbit/massbitroute/app/gbc/bin/.asdf
GDNSD_VERSION=v3.8.0
GDNSD_DIR=$ASDF/installs/gdnsd/$GDNSD_VERSION
type=gwman
service_dir=/massbit/massbitroute/app/src/sites/services
cmd=$SITE_ROOT/cmd_server
cd $SITE_ROOT
_add_cron() {
	cat <<EOF >/tmp/crontab
0 0 * * * $SITE_ROOT/scripts/run _update_ssl
EOF
	crontab /tmp/crontab
}
_git_config() {
	git config --global user.name "Vu Tran"
	git config --global user.email "baysao@gmail.com"
}
_gitclone() {
  repo=$1
  dest=$2
  shift 2
  rem="$@"
  cmd="git clone $repo $dest $rem"
  $cmd
  st=$?
  i=0
  while [ \( $i -lt $GITHUB_TRIES \) -a \( $st -ne 0 \) ]; do
    echo "Can not clone code from github $repo. Retrying ${i}th ... !"
    $cmd
    st=$?
    i=$((i + 1))
  done
  if [ $st -ne 0 ]; then
    echo "Can not clone code from github $repo after $GITHUB_TRIES tries!"
    exit 1
  fi
  git -C $dest remote set-url origin $repo
}
_rebuild_conf() {
	_dir=$SITE_ROOT/data/zones
	_file_ok=$SITE_ROOT/zones/$DOMAIN
	_file=$(mktemp)
	cat $_dir/$DOMAIN >$_file
	echo >>$_file

	find $_dir/dapi -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	find $_dir/gateway -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	find $_dir/node -type f -iname '*.zone' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done

	mv $_file $_file_ok
}
_reload() {
	#_update_ssl
	_rebuild_conf
	$GDNSD_DIR/sbin/gdnsd -c $SITE_ROOT checkconf
	if [ $? -eq 0 ]; then
		$GDNSD_DIR/bin/gdnsdctl -c $SITE_ROOT replace
	fi
	$cmd _update
}

_install() {
	mkdir -p $service_dir $SITE_ROOT/etc $SITE_ROOT/data $SITE_ROOT/logs
	
	service=ssl
	dest=/etc/letsencrypt
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://$auth@git.${DOMAIN}/massbitroute/${service}.git  $dest

	service=gbc
	dest=/massbit/massbitroute/app/$service
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_gbc  $dest

	asdfdest=/massbit/massbitroute/app/gbc/bin/.asdf
	if [ -d "$asdfdest" ]; then
	  rm -rf $asdfdest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_asdf  $asdfdest

	service=mkagent
	dest=$SITE_ROOT/etc/$service
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_mkagent  $dest

	service=$type
	gitdir=$service_dir/$service
	giturl=https://github.com/massbitprotocol/massbitroute_${service}
	if [ -d "$gitdir" ]; then
	  git -C $gitdir remote set-url origin $giturl
	  git -C $gitdir pull
	else
	  git clone $giturl $gitdir
	fi
  sudo sed 's/_DOMAIN_/${DOMAIN}/g' $service_dir/$service/zone.tpl > $service_dir/$service/data/${DOMAIN}

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
		liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	cp supervisor.conf /etc/supervisor/conf.d/${type}.conf

	for svr in systemd-resolved; do
		systemctl disable $svr
		systemctl stop $svr
	done

	for svr in supervisor; do
		systemctl enable $svr
		systemctl start $svr
	done

	supervisorctl update
}

_update_ssl() {
	_git_config
	git_ssl='git -C /etc/letsencrypt'
	bash $SITE_ROOT/cert.sh _renew
	$git_ssl add /etc/letsencrypt
	$git_ssl commit -m update
	$git_ssl push origin master
}

_monitor() {
	_add_cron
	# renew ssl

	# check change on git
	is_reload=0
	git -C $SITE_ROOT pull origin master | grep -i "updating"
	if [ $? -eq 0 ]; then
		is_reload=1

	fi

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
}

_service_grafana() {
	mkdir -p $SITE_ROOT/data/grafana
	GRAFANA_DIR=$SITE_ROOT/bin/grafana/$GRAFANA_VERSION
	exec $GRAFANA_DIR/bin/grafana-server -config $SITE_ROOT/etc/grafana/stat.ini -homepath $GRAFANA_DIR
}

_service_prometheus() {
	mkdir -p $SITE_ROOT/data/prometheus
	PROMETHEUS_DIR=$SITE_ROOT/bin/prometheus/$PROMETHEUS_VERSION
	exec $PROMETHEUS_DIR/bin/prometheus --web.enable-admin-api --config.file=$SITE_ROOT/etc/prometheus/stat.yml --web.listen-address="127.0.0.1:44449" --web.external-url http://127.0.0.1:44449/__internal_prometheus --web.enable-lifecycle --storage.tsdb.path $SITE_ROOT/data/prometheus
}

_service_gdnsd() {
	# apt install -y liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev
	mkdir -p $SITE_ROOT/run/dns
	exec $GDNSD_DIR/sbin/gdnsd -c $SITE_ROOT -RD start
}
_run() {
	rm -rf $SITE_ROOT/tmp/*
	sleep 3
	$SITE_ROOT/start_server
}
loop() {
	while true; do
		$@
		sleep 3
	done

}
$@
